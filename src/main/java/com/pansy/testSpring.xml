<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"
    default-lazy-init="false"
    default-autowire-candidates="*Repository,repo">

    <!-- 构造器实例化bean-->
    <bean id="exampleBean" class="com.pansy.pojo.ExampleBean" />
    <!-- 静态工厂方法实例化bean-->
    <bean id="clientService" class="com.pansy.service.ClientService" factory-method="createInstance" />
    <!-- 实例工厂方法实例化bean，一个工厂类可以有多个工厂方法-->
    <bean id="serviceLocator" class="com.pansy.service.DefaultServiceLocator"/>
    <bean id="clientService2" factory-bean="serviceLocator" factory-method="createClientServiceInstance" />
    <bean id="account" factory-bean="serviceLocator" factory-method="createAccountServiceInstance" />
    <!-- 解析构造器参数-->
    <bean id="bar" class="com.pansy.pojo.Bar" />
    <bean id="baz" class="com.pansy.pojo.Baz" />
    <bean id="foo" class="com.pansy.pojo.Foo">
        <constructor-arg ref="bar" />
        <constructor-arg ref="baz" />
    </bean>
    <!-- 当使用简单类型，SpringIOC容器无法判断值的类型，所以无法匹配-->
    <bean id="exampleBean2" class="com.pansy.pojo.ExampleBean2">
        <constructor-arg type="int" value="750000" />
        <constructor-arg type="java.lang.String" value="42" />
    </bean>
    <!-- 或者使用index属性来指定构造参数的位置-->
    <bean id="exampleBean3" class="com.pansy.pojo.ExampleBean2">
        <constructor-arg index="0" value="750000" />
        <constructor-arg index="1" value="42" />
    </bean>
    <!-- 再或者通过参数的名称来消除歧义，需要注意的是，解析这个配置的代码必须启用调试标记来编译，这样Spring才能从构造参数查找参数名称
        或者开发者也可以使用@ConstructorProperties注解来显示声明构造函数的名称-->
    <bean id="exampleBean4" class="com.pansy.pojo.ExampleBean2">
        <constructor-arg name="years" value="75000" />
        <constructor-arg name="ultimateAnswer" value="42" />
    </bean>
    <!-- setter注入-->
    <bean id="exampleBean5" class="com.pansy.pojo.ExampleBean3">
        <property name="beanOne">
            <ref bean="anotherExampleBean" />
        </property>
        <property name="beanTwo" ref="yetAnotherBean" />
        <property name="i" value="1" />
    </bean>
    <bean id="anotherExampleBean" class="com.pansy.pojo.AnotherBean" />
    <bean id="yetAnotherBean" class="com.pansy.pojo.YetAnotherBean" />
    <!-- 构造器注入-->
    <bean id="exampleBean6" class="com.pansy.pojo.ExampleBean3">
        <constructor-arg>
            <ref bean="anotherExampleBean" />
        </constructor-arg>
        <constructor-arg ref="yetAnotherBean" />
        <constructor-arg type="int" value="1" />
    </bean>
    <!-- 静态工厂方法注入，工厂方法的实例的使用本质上样式完全一样（除了使用factory_bean属性代替class属性之外）-->
    <bean id="exampleBean7" class="com.pansy.pojo.ExampleBean4" factory-method="createInstance">
        <constructor-arg>
            <ref bean="anotherExampleBean" />
        </constructor-arg>
        <constructor-arg ref="yetAnotherBean" />
        <constructor-arg type="int" value="1" />
    </bean>
    <!--<property>元素的value属性指定了一个属性或构造函数参数作为可读的字符串表示。使用Spring的转换服务将这些值从string转成属性或参数的真实类型-->
    <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/mydb" />
        <property name="username" value="root"/>
        <property name="password" value="admin"/>
    </bean>
    <!-- 更简洁的XML配置使用了命名P空间-->
    <bean id="myDataSource2" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close"
        p:driverClassName="com.mysql.jdbc.Driver"
        p:url="jdbc:mysql://localhost:3306/mydb"
        p:username="root"
        p:password="admin"/>
    <!-- 配置java.util.Properties实例-->
    <bean id="mappings" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <value>
                jdbc.driver.className=com.mysql.jdbc.Driver
                jdbc.url=jdbc:mysql://localhost:3306/mydb
            </value>
        </property>
        <!-- 引入配置文件-->
        <property name="location">
            <!--<value>classpath:db.properties</value>-->
            <value>file:db.properties</value>
        </property>
    </bean>
    <bean id="myDataSource3" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.className}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 在容器中传递另一个bean的id（字符串值，而不是引用）到<constructor-arg>或<proeprty>元素时，idref元素是一种简单的误差检验方式-->
    <bean id="theTargetBean" class="com.pansy.pojo.AnotherBean"/>
    <bean id="theClientBean" class="com.pansy.pojo.ExampleBean5">
        <property name="targetName">
            <idref bean="theTargetBean"></idref>
        </property>
    </bean>
    <!--上面的bean定义片段等价于下面的代码，第一种优于第二种，因为idref标签允许容器在部署时验证引用的bean-->
    <bean id="theClientBean2" class="com.pansy.pojo.ExampleBean5">
        <property name="targetName" value="theTargetBean"/>
    </bean>
    <!-- 内部bean，<property>或<constructor-arg>元素内的<bean>元素中定义bean称为内部bean-->
    <bean id="outer" class="com.pansy.pojo.Outer">
        <property name="target">
            <bean class="com.pansy.pojo.Inner">
                <property name="name" value="Fiona Apple"/>
                <property name="age" value="25"/>
            </bean>
        </property>
    </bean>
    <!-- Collections-->
    <bean id="moreComplexObject" class="com.pansy.pojo.ComplexObject">
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.org</prop>
                <prop key="support">support@example.org</prop>
                <prop key="development">development@example.org</prop>
            </props>
        </property>
        <property name="someList">
            <list>
                <value>a list element followed by a reference</value>
                <ref bean="myDataSource"/>
            </list>
        </property>
        <property name="someMap">
            <map>
                <entry key="an entry" value="just some string"/>
                <entry key="a ref" value-ref="myDataSource"/>
            </map>
        </property>
        <property name="someSet">
            <set>
                <value>just some string</value>
                <ref bean="myDataSource"/>
            </set>
        </property>
    </bean>
    <!-- 集合合并-->
    <bean id="parent" class="com.pansy.pojo.ComplexObject" abstract="true">
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.com</prop>
                <prop key="support">support@example.com</prop>
            </props>
        </property>
    </bean>
    <bean id="child" parent="parent">
        <property name="adminEmails">
            <props merge="true">
                <prop key="sales">sales@example.com</prop>
                <prop key="support">support@example.co.uk</prop>
            </props>
        </property>
    </bean>
    <!-- 强类型集合-->
    <bean id="foo2" class="com.pansy.pojo.Foo2">
        <property name="accounts">
            <map>
                <entry key="one" value="9.99"/>
                <entry key="two" value="2.75"/>
                <entry key="six" value="3.99"/>
            </map>
        </property>
    </bean>
    <!-- 把属性的空参数处理为空String，<null>元素处理null值-->
    <bean class="com.pansy.pojo.ExampleBean">
        <property name="email" value=""/>
    </bean>
    <bean class="com.pansy.pojo.ExampleBean">
        <property name="email">
            <null/>
        </property>
    </bean>
    <!-- p命名空间，不需要<property>元素便能使用bean元素的属性来描述属性值，以下显示四个bean片段，两两结果相同-->
    <bean name="classic" class="com.pansy.pojo.ExampleBean">
        <property name="email" value="foo@bar.com"/>
    </bean>
    <bean name="p-namespace" class="com.pansy.pojo.ExampleBean" p:email="foo@bar.com"/>
    <bean name="john-classic" class="com.pansy.pojo.Person">
        <property name="name" value="John Doe"/>
        <property name="spouse" ref="jane"></property>
    </bean>
    <bean name="john-modern" class="com.pansy.pojo.Person" p:name="John Doe" p:spouse-ref="jane"/>
    <bean id="jane" class="com.pansy.pojo.Person">
        <property name="name" value="Jane"/>
    </bean>
    <!-- c命名空间，允许使用行内属性配置构造函数参数而不用嵌入<constructor-arg>-->
    <bean id="foo3" class="com.pansy.pojo.Foo" c:bar-ref="bar" c:baz-ref="baz"/>
    <bean id="foo4" class="com.pansy.pojo.Foo" c:_0-ref="bar" c:_1-ref="baz"/>
    <!-- 当你设置bean属性时，你可以使用混合的或嵌入的属性名字，只要路径中除了最后的属性名之外所有组件都是非null-->
    <bean id="foo5" class="com.pansy.pojo.Bar">
        <!--<property name="fred.bob.sammy" value="123"/>-->
    </bean>
    <!-- 有时bean之间的依赖关系是间接的；例如，类中的静态初始化程序需要触发，例如数据驱动注册。-->
    <bean id="beanOne" class="com.pansy.pojo.ExampleBean6" depends-on="manager"/>
    <bean id="manager" class="com.pansy.pojo.ManagerBean"/>
    <!-- 表示多个bean上的依赖关系，提供一个bean名字列表作为depends-on特性的值，用逗号空格或分号作为有效分隔符-->
    <bean id="beanTwo" class="com.pansy.pojo.ExampleBean6" depends-on="manager,accountDao">
        <property name="manager" ref="manager"/>
    </bean>
    <bean id="accountDao" class="com.pansy.pojo.JdbcAccountDao"/>
    <!-- 延迟初始化，当延迟初始化是一个非延迟初始化的单例bean的依赖时，延迟初始化的bean会被创建。你也可以通过<beans>中的default-lazy-init特性
    控制延迟初始化-->
    <bean id="lazy" class="com.pansy.pojo.ExpensiveToCreateBean" lazy-init="true"/>
    <!-- 通过使用<bean>元素的autowire特性你可以指定一个bean定义的自动转配模式，包括no,byName,byType,constructor-->
    <bean id="exampleBean8" class="com.pansy.pojo.ExampleBean" autowire="no"></bean>
    <!-- 在单个bean的基础上，可以排除bean在自动装配之外，设置<bean>元素的autowired-candidate特性为false，容器会使自动装配基础
    框架不能得到指定bean定义-->
    <bean id="exampleBean9" class="com.pansy.pojo.ExampleBean" autowire-candidate="false"/>
    <!-- 也可以根据bean名称的匹配模式限制自动装配的候选目标。在顶层的<bean>元素可以接收default-autowire-candidates特性中的一个或多个模式
    例如为了限制自动装配候选目标匹配任何名字以Repository结尾的bean，可以提供一个*Repository值。为了提供多种模式，可以用逗号分隔-->
</beans>